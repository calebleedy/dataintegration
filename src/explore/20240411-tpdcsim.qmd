---
title: "Two Phase Debiased Calibration Simulation"
author: "Caleb Leedy"
from: markdown+emoji
format: 
  html:
    embed-resources: true
    code-fold: true
    grid:
      margin-width: 450px
bibliography: references.bib
reference-location: margin
comments:
  hypothesis: true
---

# Summary

This report simulates two-phase sampling with the debiased calibration of
@kwon2024debiased. We check for the following:

1. Bias of $\hat Y$ and,
2. Bias of $\hat V(\hat Y)$.

For the estimator $\hat Y$ we construct 

1. The $\pi^*$-estimator,
2. The two-phase regression estimator,
3. The debiased calibration estimator (with known finite population total), and
4. The debiased calibration estimator with estimated population totals from the
   Phase 1 sample.

# Simulation Setup

```{r}
#| label: setup

B_sims <- 1000

N_obs <- 10000
n1_obs <- 1000
n2_obs <- 500

library(dplyr)
library(GECal)
library(doParallel)
library(doRNG)

```

We have the following superpopulation model:

$$
\begin{aligned}
X_{1i} &\stackrel{ind}{\sim} N(2, 1) \\
X_{2i} &\stackrel{ind}{\sim} Unif(0, 4) \\
X_{3i} &\stackrel{ind}{\sim} N(-1, 1) \\
\varepsilon_i &\stackrel{ind}{\sim} N(0, 1) \\
Y_{i} &= 3 X_{1i} + 2 X_{2i} + \varepsilon_i.
\end{aligned}
$$

and the two-phase sampling scheme is to select a SRS of size $n = $`{r} n1_obs`
from a finite population of size $N = $`{r} N_obs` for the Phase 1 sample and a
SRS of size $r =$`{r} n2_obs` from the Phase 1 sample of size 
$n = $`{r} n1_obs`.

```{r}
#| label: gen data

gen_pop <- function(obs) {
  x1 <- rnorm(obs, 2, 1)
  x2 <- runif(obs, 0, 4)
  x3 <- rnorm(obs, -1, 1)
  eps <- rnorm(obs)

  y <- 3 * x1 + 2 * x2 + eps

  return(tibble(X1 = x1, X2 = x2, X3 = x3, Y = y))
}

gen_twophase <- function(pop_df, p1_obs, p2_obs) {

  # Phase 1 
  p1_ind <- sample(1:nrow(pop_df), size = p1_obs)
  p1_df <- filter(pop_df, row_number() %in% p1_ind)

  # Phase 2
  p2_ind <- sample(1:nrow(p1_df), size = p2_obs)
  p2_df <- filter(p1_df, row_number() %in% p2_ind)

  return(list(P1 = p1_df, P2 = p2_df))

}

```

```{r}
#| label: estimators

# Each estimator should return two outcomes:
# 1. Point estimate, and
# 2. Variance estimate.
pi_star <- function(p1_df, p2_df, pop_obs, ...) {
  extra <- list(...)
  n1 <- nrow(p1_df)
  n2 <- nrow(p2_df)

  theta <- sum(p2_df$Y / n2)
  vhat <- (1 / n2 - 1 / pop_obs) * var(p2_df$Y)

  return(list(theta = theta, Var = vhat))
}

tp_reg <- function(p1_df, p2_df, pop_obs, ...) {
  extra <- list(...)
  n1 <- nrow(p1_df)
  n2 <- nrow(p2_df)

  # Step 1: Get beta
  mod <- lm(Y ~ X1 + X2, data = p2_df)

  # Step 2: Predict
  theta <- mean(predict(mod, p1_df))

  # Step 3: Get variance estimator
  vhat <-
    (1 / n1 - 1 / pop_obs) * (mod$coefficients[2]^2 * var(p1_df$X1) + 
    mod$coefficients[3]^2 * var(p1_df$X2)) +
    (1 / n2 - 1 / n1) * var(p2_df$Y - predict(mod, p2_df))

  return(list(theta = theta, Var = vhat))

}

dc_poptots <- function(p1_df, p2_df, pop_obs, ...) {
  extra <- list(...)
  n1 <- nrow(p1_df)
  n2 <- nrow(p2_df)

  if ("entropy" %in% names(extra)) {
    entropy <- extra$entropy
  } else {
    entropy <- "EL"
  }

  samp_X <- select(p2_df, X1, X2) %>% as.matrix()
  samp_X <- cbind(rep(1, nrow(p2_df)), samp_X)
  pop_tot <- extra$pop_tot
  # FIXME: This does not work
  # TODO: Change everything to Poisson sample.
  dc_w <-  
    GEcalib(samp_X,
            d = rep(1, nrow(p2_df)),
            total = pop_tot,
            entropy = entropy,
            DS = TRUE)

  # Mean Estimation
  theta <- sum(p2_df$Y * dc_w) / pop_obs

  # Variance Estimation

  Pi_dc <- diag(1 - n2 / pop_obs) * (dc_w / N_obs)^2
  z_dc <- model.matrix(~X1 + X2, data = p2_df)
  gam_dc <- solve(t(z_dc) %*% z_dc, t(z_dc) %*% samp_df$Y)
  vhat <- 
  (p2_df$Y - t(gam_dc) %*% t(z_dc)) %*% Pi_dc %*% t(p2_df$Y - t(gam_dc) %*% t(z_dc))

  return(list(theta = theta, Var = vhat))
}

dc_esttots <- function(p1_df, p2_df, pop_obs, ...) {
  extra <- list(...)
  n1 <- nrow(p1_df)
  n2 <- nrow(p2_df)

}

```

```{r}
#| label: MCMC

set.seed(1)
pop_df <- gen_pop(N_obs)
true_theta <- mean(pop_df$Y)

clust <- makeCluster(min(detectCores() - 2, 100))
registerDoParallel(clust)

mc_res <- foreach(iter=1:B_sims, .packages = c("dplyr", "GECal")) %dorng% {

  samps <- gen_twophase(pop_df, n1_obs, n2_obs)
  p1_df <- samps[[1]]
  p2_df <- samps[[2]]

  pistar_est <- pi_star(p1_df, p2_df, nrow(pop_df))
  tpreg_est <- tp_reg(p1_df, p2_df, nrow(pop_df))
  dcpop_est <- 
    dc_poptots(p1_df, p2_df, nrow(pop_df),
               pop_tot = c(nrow(pop_df), sum(pop_df$X1), sum(pop_df$X2)))

  return(
    tibble(Est = c("pistar", "tpreg"),
           Theta = c(pistar_est[[1]], tpreg_est[[1]]),
           Var = c(pistar_est[[2]], tpreg_est[[2]]))
  )

} %>% bind_rows()

stopCluster(clust)

```


```{r}
#| label: Analysis

# Analyze Mean
mc_res %>%
  mutate(err = Theta - true_theta) %>%
  mutate(CI = abs(err) < qnorm(0.975) * sqrt(Var)) %>%
  group_by(Est) %>%
  summarize(bias = mean(err),
            rmse = sqrt(mean(err^2)),
            EmpCI = mean(CI),
            sdest = sd(Theta)) %>%
  ungroup() %>%
  mutate(Ttest = abs(bias) / sqrt(sdest^2 / B_sims)) %>%
  select(-sdest)

# Analyze Variance
mc_res %>%
  group_by(Est) %>%
  summarize(mcvar = var(Theta),
            estvar = mean(Var),
            varvar = var(Var)) %>%
  ungroup() %>%
  mutate(Ttest = abs(mcvar - estvar) / sqrt(varvar / B_sims))


```
