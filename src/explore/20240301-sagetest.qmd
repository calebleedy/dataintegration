---
title: "Sage Math Representation for Optimal Regression Estimation"
author: "Caleb Leedy"
date: "March 1, 2024"
format: html
jupyter:
  kernel: sagemath
---

# Summary: Part 1

```{python}

f11, f10, y = var('f11 f10 y')
sl, sx, sy = var('sl sx sy')
pcy, ply = var('pcy ply')

v_all = matrix([
  [pcy**2 * sy**2 + sl**2 + 2 * ply * sl * sy, 0, pcy**2 * sy**2 + ply * sl * sy],
  [0, pcy**2 * sy**2 + sl**2 + 2 * ply * sl * sy, 0],
  [pcy**2 * sy**2 + ply * sl * sy, 0, sy**2]
])

mod_mat = matrix([
  [1, 1],
  [1, 1],
  [1, 0]
])
y_vec = matrix([
  [f11],
  [f10],
  [y]
])

out = (mod_mat.transpose() * v_all.inverse() * mod_mat).inverse() * mod_mat.transpose() * v_all.inverse() * y_vec
(out[0, 0]).full_simplify()

estvar = (mod_mat.transpose() * v_all.inverse() * mod_mat).inverse()
(estvar[0, 0]).full_simplify()


```



# Summary: Part 4

We consider the model where $f(X_1) = E[Y \mid X_1] + \ell(X_1)$, $f(X_2) = E[Y
\mid X_2]$ and $f(X_1, X_2) = E[Y \mid X_1, X_2] + \ell(X_1, X_2)$. We want to
get the variance of $\hat \mu_y$. Then we want to show 

1. $0 = \argmin_{\sigma_\ell^2} V(\hat \mu_y)$ for each $\sigma_\ell$

This model we have a true nonmonotone missing problem with the
following parts observed:

| Segment | $X_1$ | $X_2$ | $Y$ |
| ------- | ----- | --- | --- |
|$A_{11}$ | ✔️     | ✔️   |     |
|$A_{10}$ | ✔️     |     | ✔️   |

We assume that $|A_{11}| = |A_{10}|$.

```{sage}
#| label: sympyres3
#| echo: false
#| output: asis

#import sympy
#
#def matinv_2x2(mat):
#  assert mat.shape == (2, 2)
#
#  det_mat = mat[0, 0] * mat[1, 1] - mat[0, 1] * mat[1, 0]
#  ret = sympy.Matrix([
#    [mat[1, 1], -mat[0, 1]],
#    [-mat[1, 0], mat[0, 0]]
#  ])
#
#  return(ret / det_mat)
#
#def matinv_3x3(mat):
#  assert mat.shape == (3, 3)
#
#  mat = mat.T
#
#  adj_mat = sympy.Matrix([
#    [mat[[1, 2], [1, 2]].det(), -mat[[1, 2], [0, 2]].det(),  mat[[1, 2], [0, 1]].det()],
#    [-mat[[0, 2], [1, 2]].det(), mat[[0, 2], [0, 2]].det(), -mat[[0, 2], [0, 1]].det()],
#    [mat[[0, 1], [1, 2]].det(), -mat[[0, 1], [0, 2]].det(),  mat[[0, 1], [0, 1]].det()],
#  ])
#
#  return(adj_mat / mat.det())
#
#def matdet_2x2(mat):
#  assert mat.shape == (2, 2)
#  return(mat[0, 0] * mat[1, 1] - mat[0, 1] * mat[1, 0])
#
#def matdet_3x3(mat):
#  assert mat.shape == (3, 3)
#  return(mat[0, 0] * matdet_2x2(mat[[1, 2], [1, 2]]) \
#    - mat[0, 1] * matdet_2x2(mat[[1, 2], [0, 2]]) \
#    + mat[0, 2] * matdet_2x2(mat[[1, 2], [0, 1]]))
#
#def matdet_4x4(mat):
#  assert mat.shape == (4, 4)
#  return(mat[0, 0] * matdet_3x3(mat[[1, 2, 3], [1, 2, 3]]) \
#    - mat[0, 1] * matdet_3x3(mat[[1, 2, 3], [0, 2, 3]]) \
#    + mat[0, 2] * matdet_3x3(mat[[1, 2, 3], [0, 1, 3]]) \
#    - mat[0, 3] * matdet_3x3(mat[[1, 2, 3], [0, 1, 2]]))


# We need variables for what we observe:
f11x1, f10x1, f11x2, f11x12, y01 = var('f11x1 f10x1 f11x2 f11x12 y01')
sx1, sx2, sx12, sl1, sl2, sl12, sy = var('sx1 sx2 sx12 sl1 sl2 sl12 sy')
pl1y, px1x2, px1l2, px2l1 = var('pl1y px1x2 px1l2 px2l1')
pl1l2, pl2y, pl12y = var('pl1l2 pl2y pl12y')
px1x12, px1l12, px12l1, pl1l12 = var('px1x12 px1l12 px12l1 pl1l12')
px2x12, px2l12, px12l2, pl2l12 = var('px2x12 px2l12 px12l2 pl2l12')

c01 = px1x2 * sx1 * sx2 + px2l1 * sx1 * sl2 + px2l1 * sx2 * sl1 + pl1l2 * sl1 * sl2
c02 = px1x12 * sx1 * sx12 + px1l12 * sx1 * sl12 + px12l1 * sx12 * sl1 + pl1l12 * sl1 * sl12
c12 = px2x12 * sx2 * sx12 + px2l12 * sx2 * sl12 + px12l2 * sx12 * sl2 + pl2l12 * sl2 * sl12

v_11 = matrix([
  [sx1**2 + sl1**2 + 2 * pl1y * sl1 * sy, c01, c02],
  [c01, sx2**2 + sl2**2 + 2 * pl2y * sl2 * sy, c12],
  [c02, c12, sx12**2 + sl12**2 + 2 * pl12y * sl12 * sy]
])
v_10 = matrix([
  [sx1**2 + sl1**2 + 2 * pl1y * sl1 * sy, sx1**2 + pl1y * sl1 * sy],
  [sx1**2 + pl1y * sl1 * sy, sy**2]
])

v_all = block_matrix([[v_11, 0], [0, v_10]])

mod_mat = matrix([
  [1, 1, 0, 0],
  [1, 0, 1, 0],
  [1, 0, 0, 1],
  [1, 1, 0, 0],
  [1, 0, 0, 0]
])
y_vec = matrix([
  [f11x1],
  [f11x2],
  [f11x12],
  [f10x1],
  [y01]
])

v_inv = sympy.diag(matinv_3x3(v_11), matinv_2x2(v_10))
xvinvx = mod_mat.transpose() * v_all.inverse() * mod_mat 

# xvinvx_inv = matinv_4x4(xvinvx)

out = xvinvx.inverse() * mod_mat.transpose() * v_all.inverse() * y_vec
res = out[0, 0]
res.full_simplify()


# vhatmuy = sympy.simplify(xvinvx_inv[0, 0])
vhatmuy = matdet_3x3(xvinvx[[1, 2, 3], [1, 2, 3]]) / matdet_4x4(xvinvx)
sympy.simplify(vhatmuy)
sympy.simplify(sympy.diff(vhatmuy, sl))

```



