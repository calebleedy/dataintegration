---
title: "Non-Nested Two Phase Debiased Calibration Simulation"
author: "Caleb Leedy"
from: markdown+emoji
format: 
  html:
    embed-resources: true
    code-fold: true
    grid:
      margin-width: 450px
bibliography: references.bib
reference-location: margin
comments:
  hypothesis: true
---

# Summary

This report simulates non-nested two-phase sampling with the debiased
calibration of @kwon2024debiased. We check for the following:

1. Bias of $\hat Y$ and,
2. Bias of $\hat V(\hat Y)$.

For the estimator $\hat Y$ we construct 

1. The $\pi^*$-estimator,
2. The two-phase regression estimator,
3. The debiased calibration estimator (with known finite population total), and
4. The debiased calibration estimator with estimated population totals from the
   Phase 1 sample.

# Simulation Setup

```{r}
#| label: setup

B_sims <- 1000

N_obs <- 10000
n1_obs <- 1000
n2_obs <- 500

library(dplyr)
library(GECal)
library(nleqslv)
library(doParallel)
library(doRNG)
library(CVXR)
library(rlang)

```

We have the following superpopulation model:

$$
\begin{aligned}
X_{1i} &\stackrel{ind}{\sim} N(2, 1) \\
X_{2i} &\stackrel{ind}{\sim} Unif(0, 4) \\
X_{3i} &\stackrel{ind}{\sim} N(0, 1) \\
X_{4i} &\stackrel{ind}{\sim} Unif(0.1, 0.9) \\
\varepsilon_i &\stackrel{ind}{\sim} N(0, 1) \\
Y_{i} &= 3 X_{1i} + 2 X_{2i} + \varepsilon_i \\
\pi_{1i} &= FIXME\\
\pi_{2i|1} &= FIXME.
\end{aligned}
$$

and the non-nested two-phase sampling scheme is to select a SRS of 
size $n = $`{r} n1_obs`
from a finite population of size $N = $`{r} N_obs` for the Phase 1 sample,
$A_1$, and a Poisson sample with expected size $r =$`{r} n2_obs` for the Phase 2
sample, $A_2$. We only observe $Y$ in the Phase 2 sample, but we observe 
$(X_1, X_2)$ in both $A_1$ and $A_2$.

```{r}
#| label: generate population and samples

gen_pop <- function(obs) {

  x1 <- rnorm(obs, 2, 1)
  x2 <- runif(obs, 0, 4)
  x3 <- rnorm(obs, 0, 1)
  x4 <- runif(obs, 0.1, 0.9)
  eps <- rnorm(obs)

  y <- 3 * x1 + 2 * x2 + eps

  return(tibble(X1 = x1, X2 = x2, X3 = x3, X4 = x4, Y = y))
}

#' This function adds sampling probabilites to a population data frame.
#'
#' @details The phase 2 formula will be included for every element. There is no
#' information about if an element is part of the Phase 1 or Phase 2 sample.
update_pop <- function(pop_df, p1_formula, p2_formula) {

  pi1 <- eval(parse_expr(p1_formula))
  pi2 <- eval(parse_expr(p2_formula))

  pop_df %>%
    mutate(pi1 = pi1, pi2 = pi2)
}

#' This function generates Phase 1 and Phase 2 samples from an updated
#' population with selection probabilites.
gen_samps <- function(upop_df, p1_type, p2_type) {

  if (p1_type == "poisson") {
    del1 <- rbinom(nrow(upop_df), 1, upop_df$pi1)
  } else if (p1_type == "srs") {
    ind <- sample(1:nrow(upop_df), size = upop_df$pi1[1] * nrow(upop_df))
    del1 <- as.numeric(1:nrow(upop_df) %in% ind)
  } else {
    stop("We have only implemented poisson and srs for Phase 1.")
  }

  p1_df <- mutate(upop_df, del1 = del1) %>% filter(del1 == 1)

  if (p2_type == "poisson") {
    del2 <- rbinom(nrow(upop_df), 1, upop_df$pi2)
  } else if (p2_type == "srs") {
    ind <- sample(1:nrow(upop_df), size = round(upop_df$pi2[1] * nrow(upop_df)))
    del2 <- as.numeric(1:nrow(upop_df) %in% ind)
  } else {
    stop("We have only implemented poisson and srs for Phase 2.")
  }

  p2_df <- mutate(upop_df, del2 = del2) %>% filter(del2 == 1)

  return(list(p1_df, p2_df))
}

```

```{r}
#| label: estimators

ht_est <- function(p1_df, p2_df, pop_obs, sampling = "srs-poisson") {

  theta <- sum(p2_df$Y / p2_df$pi2) / pop_obs

  if (sampling == "srs-poisson") {

    v_hat <- sum((1 - p2_df$pi2) / p2_df$pi2^2 * p2_df$Y^2) / pop_obs^2

  } else {

    v_hat <- NA

  }

  return(list(theta = theta, v_hat = v_hat))
}

reg_est <- function(p1_df, p2_df, pop_obs, sampling = "srs-poisson") {

  v_poisson <- sum((1 - p2_df$pi2) / p2_df$pi2^2 * p2_df$Y^2) / pop_obs^2
  v_srs <- (1 / nrow(p2_df) - 1 / pop_obs) * var(p2_df$Y)
  d_eff <- v_poisson / v_srs
  n2_eff <- nrow(p2_df) / d_eff
  n1_eff <- nrow(p1_df)

  x1_hat <- 
    c(sum(p1_df$X1 / p1_df$pi1) / pop_obs,
      sum(p1_df$X2 / p1_df$pi1) / pop_obs)

  x2_hat <- 
    c(sum(p2_df$X1 / p2_df$pi2) / pop_obs,
      sum(p2_df$X2 / p2_df$pi2) / pop_obs)

  w <- n1_eff / (n1_eff + n2_eff)
  xc_hat <- (n1_eff * x1_hat + n2_eff * x2_hat) / (n1_eff + n2_eff)

  
  # Estimate beta
  mod <- lm(Y ~ X1 + X2, data = p2_df)

  # Regression Estimation
  y_ht <- sum(p2_df$Y / p2_df$pi2) / pop_obs
  theta <- y_ht + sum((xc_hat - x2_hat) * mod$coefficients[2:3])

  # Variance Estimation
  coefs <- mod$coefficients
  eps <- (p2_df$Y - coefs[1] * w - coefs[2] * w * p2_df$X1 - coefs[3] * w * p2_df$X2)
  var_x <- 
  (1 / nrow(p1_df) - 1 / pop_obs) * var(matrix(c(p1_df$X1, p1_df$X2), ncol = 2))

  v1 <- w^2 * matrix(coefs[2:3], nrow = 1) %*% var_x %*% matrix(coefs[2:3], ncol = 1)
  v2 <- sum((1 - p2_df$pi2) / p2_df$pi2^2 * eps^2) / pop_obs^2

  cov_xy <- c(sum((1 - p2_df$pi2) / p2_df$pi2^2 * coefs[2] * 
                 (n2_eff) / (n1_eff + n2_eff) * p2_df$X1 * eps) / pop_obs^2,
              sum((1 - p2_df$pi2) / p2_df$pi2^2 * coefs[3] * 
                 (n2_eff) / (n1_eff + n2_eff) * p2_df$X3 * eps) / pop_obs^2)
  v3 <- sum(cov_xy)

  v_hat <- v1 + v2 + v3

  return(list(theta = theta, v_hat = as.numeric(v_hat)))
}

#' This  function does the debiased calibration
#'
#' @param zmat - A n x p matrix
#' @param w1i - A vector of length n
#' @param d2i - A vector of length n
#' @param T1 - A vector of length p
#' @param qi - A scaler or a vector of length n
#' @param entropy - One of "EL", "ET"
solveGE <- function(zmat, w1i, d2i, T1, qi, entropy) {

  f <- function(lam, zmat, w1i, d2i, T1, qi, entropy, returnw = FALSE) {

    if (entropy == "EL") {
      w <- -d2i / drop(zmat %*% lam)
    } else if (entropy == "ET") {
      w <- d2i * exp(drop(zmat %*% lam))
    } else {
      stop("We only accept entropy of EL or ET.")
    }

    if (returnw) {
      return(w)
    } else {
      return(drop((w * w1i * qi) %*% zmat) - T1)
    }
  }

  j <- function(lam, zmat, w1i, d2i, T1, qi, entropy) {
    if (entropy == "EL") {
      res <- t(zmat) %*% diag((w1i * qi * d2i) / drop(zmat %*% lam)^2) %*% zmat
    } else if (entropy == "ET") {
      res <- t(zmat) %*% diag((w1i * qi * d2i) * exp(drop(zmat %*% lam))) %*% zmat
    }

    return(res)
  }

  init <- c(rep(0, ncol(zmat) - 1), 1)
  res <- 
  nleqslv(init, f, jac = j, zmat = zmat, w1i = w1i, d2i = d2i,
          T1 = T1, qi = qi, entropy = entropy,
          method = "Newton", control = list(maxit = 1e5, allowSingular = TRUE))

  resw <- f(res$x, zmat, w1i, d2i, T1, qi, entropy, returnw = TRUE)

  if (!(res$termcd %in% c(1))) {
    return(NA)
  }

  return(resw)

}

dc_nn_ybar <- 
  function(p1_df,
           p2_df,
           pop_df,
           qi = 1,
           entropy = "EL",
           estT1 = TRUE,
           sampling = "srs-poisson") {

  d_vec <- 1 / (p2_df$pi2)
  if (entropy == "EL") {
    gdi <- -1 / d_vec
    gdi1 <- -1 / (1 / p1_df$pi2)
    gdip <- -1 / (1 / pop_df$pi2)
    gpinv <- d_vec^2
    gdi12 <- "-1 / d2i"
  } else if (entropy == "ET") {
    gdi <- log(d_vec)
    gdi1 <- log(1 / p1_df$pi2)
    gdip <- log(1 / pop_df$pi2)
    gpinv <- d_vec
    gdi12 <- "log(d2i)"
  } else {
    stop("This type of entropy has not yet been implemented.")
  }

  samp_X <- cbind(rep(1, nrow(p2_df)), as.matrix(select(p2_df, X1, X2)))
  zmat <- cbind(samp_X, gdi)
  w1i <- 1
  d2i <- 1 / p2_df$pi2

  if (estT1) {
    v_poisson <- sum((1 - p2_df$pi2) / p2_df$pi2^2 * p2_df$Y^2) / nrow(pop_df)^2
    v_srs <- (1 / nrow(p2_df) - 1 / nrow(pop_df)) * var(p2_df$Y)
    d_eff <- v_poisson / v_srs
    n2_eff <- nrow(p2_df) / d_eff
    n1_eff <- nrow(p1_df)

    x1_hat <- 
      c(sum(p1_df$X1 * qi / p1_df$pi1),
        sum(p1_df$X2 * qi / p1_df$pi1))

    x2_hat <- 
      c(sum(p2_df$X1 * qi / p2_df$pi2),
        sum(p2_df$X2 * qi / p2_df$pi2))

    w <- n1_eff / (n1_eff + n2_eff)
    xc_hat <- (n1_eff * x1_hat + n2_eff * x2_hat) / (n1_eff + n2_eff)

    T1 <- c(nrow(pop_df),
            xc_hat[1],
            xc_hat[2],
            sum(gdip * qi))
  } else {
    w <- 1
    T1 <- c(nrow(pop_df),
            sum(pop_df$X1 * qi),
            sum(pop_df$X2 * qi),
            sum(gdip * qi))
  }

  dc_w <- solveGE(zmat, w1i, d2i, T1, qi, entropy)

  # Mean Estimation
  theta <- sum(p2_df$Y * dc_w * w1i) / nrow(pop_df)

  z_dc <- model.matrix(~1 + p2_df$X1 + p2_df$X2 + gdi)
  gam_dc <- 
    solve(t(z_dc) %*% diag(d2i * gpinv * qi) %*% z_dc,
          t(z_dc) %*% diag(d2i * gpinv) %*% p2_df$Y)

  if (sampling == "srs-poisson") {

    if (estT1) {
      # Variance Estimation
      coefs <- as.numeric(gam_dc)
      u_mat <- 
      matrix(c(rep(1, nrow(p2_df)), p2_df$X1 * w, p2_df$X2 * w, gdi * qi), ncol = 4)
      eps <- (p2_df$Y - drop(u_mat %*% coefs))
      var_x <- 
      (1/nrow(p1_df) - 1/nrow(pop_df)) * var(matrix(c(p1_df$X1, p1_df$X2), ncol = 2))

      v1 <- 
      w^2 * matrix(coefs[2:3], nrow = 1) %*% var_x %*% matrix(coefs[2:3], ncol = 1)
      v2 <- sum((1 - p2_df$pi2) / p2_df$pi2^2 * eps^2) / nrow(pop_df)^2

      cov_xy <- c(sum((1 - p2_df$pi2) / p2_df$pi2^2 * coefs[2] * 
                     (n2_eff) / (n1_eff + n2_eff) * p2_df$X1 * eps) / nrow(pop_df)^2,
                  sum((1 - p2_df$pi2) / p2_df$pi2^2 * coefs[3] * 
                     (n2_eff) / (n1_eff + n2_eff) * p2_df$X3 * eps) / nrow(pop_df)^2)
      v3 <- sum(cov_xy)

      v_hat <- v1 + v2 + v3

    } else {
      coefs <- as.numeric(gam_dc)
      u_mat <- 
      matrix(c(rep(1, nrow(p2_df)), p2_df$X1, p2_df$X2, gdi * qi), ncol = 4)
      eps <- (p2_df$Y - drop(u_mat %*% coefs))
      v2 <- sum((1 - p2_df$pi2) / p2_df$pi2^2 * eps^2) / nrow(pop_df)^2

      v_hat <- v2

    }

  } else {
    v_hat <- NA
  }

  return(list(theta = theta, v_hat = as.numeric(v_hat)))
}

```





```{r}
#| label: run MCMC

set.seed(1)
pop_df <- gen_pop(N_obs)
true_theta <- mean(pop_df$Y)

upop_df <-
  update_pop(
    pop_df,
    "n1_obs / N_obs",
    "ifelse(pt(-pop_df$X1 + 1, 3) > 0.9, 0.9, pt(-pop_df$X1 + 1, 3))"
  )

clust <- makeCluster(min(detectCores() - 2, 100), outfile = "")
registerDoParallel(clust)

mc_res <- 
  foreach(iter=1:B_sims,
          .packages = c("dplyr", "nleqslv", "rlang")) %dopar% {

    if (iter %% 100 == 0) {
      print(paste0("Iter: ", iter))
    }

    set.seed(iter)

    samps <- gen_samps(upop_df, "srs", "poisson")
    p1_df <- samps[[1]]
    p2_df <- samps[[2]]

    ht <- ht_est(p1_df, p2_df, nrow(upop_df))
    reg <- reg_est(p1_df, p2_df, nrow(upop_df))
    dcpop <- dc_nn_ybar(p1_df, p2_df, upop_df, entropy = "EL", estT1 = FALSE)
    dcest <- dc_nn_ybar(p1_df, p2_df, upop_df, entropy = "EL", estT1 = TRUE)

    return(
      tibble(Est = c("HT", "Reg", "dcpop", "dcest"),
             Theta = c(ht[[1]], reg[[1]], dcpop[[1]], dcest[[1]]),
             Var = c(ht[[2]], reg[[2]], dcpop[[2]], dcest[[2]]),
             Iter = iter)
    )
  } %>% bind_rows()

stopCluster(clust)

```


```{r}
#| label: analyze results

# Check for failures
filter(mc_res, is.na(Theta))

# Analyze Mean
mc_res %>%
  mutate(err = Theta - true_theta) %>%
  mutate(CI = abs(err) < qnorm(0.975) * sqrt(Var)) %>%
  group_by(Est) %>%
  summarize(Bias = mean(err, na.rm = TRUE),
            RMSE = sqrt(mean(err^2, na.rm = TRUE)),
            EmpCI = mean(CI, na.rm = TRUE),
            sdest = sd(Theta, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(Ttest = abs(Bias) / sqrt(sdest^2 / B_sims)) %>%
  select(-sdest) %>%
  mutate(Ind = case_when(
    Est == "dcest" ~ 4,
    Est == "dcpop" ~ 3,
    Est == "Reg" ~ 2,
    Est == "HT" ~ 1)
  ) %>%
  mutate(Est = case_when(
    Est == "dcest" ~ "DC-Est",
    Est == "dcpop" ~ "DC-Pop",
    Est == "HT" ~ "HT",
    Est == "Reg" ~ "Reg")
  ) %>%
  arrange(Ind) %>%
  select(Est, Bias, RMSE, EmpCI, Ttest) 

%>%
  knitr::kable("latex", booktabs = TRUE, escape = FALSE, digits = 3) %>%
  cat(file = "tables/nndcsim_mean.tex")


# Analyze Variance
mc_res %>%
  group_by(Est) %>%
  summarize(MCVar = var(Theta, na.rm = TRUE),
            EstVar = mean(Var, na.rm = TRUE),
            VarVar = var(Var, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(Ttest = abs(MCVar - EstVar) / sqrt(VarVar / B_sims)) %>%
  mutate(Ind = case_when(
    Est == "dcest" ~ 4,
    Est == "dcpop" ~ 3,
    Est == "Reg" ~ 2,
    Est == "HT" ~ 1)
  ) %>%
  arrange(Ind) %>%
  select(Est, MCVar, EstVar, VarVar, Ttest) 

%>%
  knitr::kable("latex", booktabs = TRUE, escape = FALSE, digits = 4) %>%
  cat(file = "tables/nndcsim_var.tex")



```
