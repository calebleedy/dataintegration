---
title: "Simulation Study from Cheng et al. (2022)"
author: "Caleb Leedy"
date: "February 6, 2024"
date-format: "D MMMM YYYY"
format:
  pdf:
    include-in-header: 
      - "latex_header.tex"
bibliography: references.bib
---

```{r}
#| label: parameters

B <- 10
n_obs <- 2000


```


# Summary

This document does the following:

1. Recreates the simulation study for the Single Primary Variable simulation 
   from @cheng2022handling,
2. Recreates the simulation study for Multiple Variables from
   @cheng2022handling.

# Simulation

```{r}
#| label: libraries
#| echo: false

library(dplyr)
library(purrr)
library(knitr)
library(doParallel)
library(doRNG)
library(parallelly)

```

```{r}
#| label: generate data
#| echo: false

gen_data <- function(n_obs) {
  # Steps:
  # 1. Identify missingness pattern
  # 2. Generate data

  # I am going to use SRS of Equal sizes 
  seg_size <- n_obs / 8

  mu_1 <- 1
  mu_2 <- c(1, -1)
  mu_3 <- c(0, -1, -1)

  sig_1 <- 1
  sig_2 <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
  sig_3 <- matrix(c(1, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 1), nrow = 3)
  # In terms of (Y1, Y2, Y3) we have the following segments:
  # 111, 011, 101, 001, 110, 010, 100, 000

  # 111
  y3y1y2 <- MASS::mvrnorm(seg_size, mu = mu_3, Sigma = sig_3)

  # 011
  y1y2 <- MASS::mvrnorm(seg_size, mu = mu_2, Sigma = sig_2)

  # 101
  y3y2 <- MASS::mvrnorm(seg_size, mu = mu_2, Sigma = sig_2)

  # 001
  y2 <- rnorm(seg_size, mean = mu_1, sd = sig_1)

  # 110
  y3y1 <- MASS::mvrnorm(seg_size, mu = mu_2, Sigma = sig_2)
  # 010
  y1 <- rnorm(seg_size, mean = mu_1, sd = sig_1)

  # 100
  y3 <- rnorm(seg_size, mean = mu_1, sd = sig_1)

  # 000
  # nothing

  t111 <- tibble(Y3 = y3y1y2[, 1], Y1 = y3y1y2[, 2], Y2 = y3y1y2[, 3])
  t011 <- tibble(Y3 = NA, Y1 = y1y2[, 1], Y2 = y1y2[, 2])
  t101 <- tibble(Y3 = y3y2[, 1], Y1 = NA, Y2 = y3y2[, 2])
  t001 <- tibble(Y3 = NA, Y1 = NA, Y2 = y2)
  t110 <- tibble(Y3 = y3y1[, 1], Y1 = y3y1[, 2], Y2 = NA)
  t010 <- tibble(Y3 = NA, Y1 = y1, Y2 = NA)
  t100 <- tibble(Y3 = y3, Y1 = NA, Y2 = NA)

  return(bind_rows(t111, t011, t101, t001, t110, t010, t100))
}

```

```{r}
#| label: implementing estimators

ipw_est <- function(df, n_tot) {
  # Steps:
  # 1. Estimate O00, O10, O01, O11
  # 2. Combine

  # 1. Estimate O00, O10, O01, O11
  df_00 <- mutate(df, A = !is.na(Y3))
  mod00 <- glm(A ~ 1, data = df_00, family = "binomial")
  O00_00 <- predict(mod00, filter(df, !is.na(Y3), is.na(Y1), is.na(Y2)))
  O00_10 <- predict(mod00, filter(df, !is.na(Y3), !is.na(Y1), is.na(Y2)))
  O00_01 <- predict(mod00, filter(df, !is.na(Y3), is.na(Y1), !is.na(Y2)))
  O00_11 <- predict(mod00, filter(df, !is.na(Y3), !is.na(Y1), !is.na(Y2)))

  df_10 <- 
    filter(df, !is.na(Y1)) |>
    mutate(A = !is.na(Y3))
  mod10 <- glm(A ~ Y1, data = df_10, family = "binomial")
  O10_10 <- predict(mod10, filter(df, !is.na(Y3), !is.na(Y1), is.na(Y2)))
  O10_11 <- predict(mod10, filter(df, !is.na(Y3), !is.na(Y1), !is.na(Y2)))

  df_01 <- 
    filter(df, !is.na(Y2)) |>
    mutate(A = !is.na(Y3))
  mod01 <- glm(A ~ Y2, data = df_01, family = "binomial")
  O01_01 <- predict(mod01, filter(df, !is.na(Y3), is.na(Y1), !is.na(Y2)))
  O01_11 <- predict(mod01, filter(df, !is.na(Y3), !is.na(Y1), !is.na(Y2)))

  df_11 <- 
    filter(df, !is.na(Y1), !is.na(Y2)) |>
    mutate(A = !is.na(Y3))
  mod11 <- glm(A ~ Y1 + Y2, data = df_11, family = "binomial")
  O11 <- predict(mod11, filter(df, !is.na(Y3), !is.na(Y1), !is.na(Y2)))

  # 2. Combine
  y_111 <- filter(df, !is.na(Y3), !is.na(Y1), !is.na(Y2)) |> pull(Y3)
  y_101 <- filter(df, !is.na(Y3), is.na(Y1), !is.na(Y2)) |> pull(Y3)
  y_110 <- filter(df, !is.na(Y3), !is.na(Y1), is.na(Y2)) |> pull(Y3)
  y_100 <- filter(df, !is.na(Y3), is.na(Y1), is.na(Y2)) |> pull(Y3)

  res <- 
    y_111 * (1 + O11 + O01_11 + O10_11 + O00_11) +
    y_101 * (1 + O01_01 + O00_01) +
    y_110 * (1 + O10_10 + O00_10) +
    y_100 * (1 + O00_00)

  return(sum(res) / n_tot)
}

reg_est <- function(df, n_tot) {
  # Steps:
  # 1. Estimate m00, m10, m01, m11
  # 2. Combine

  # 1. Estimate m00, m10, m01, m11
  df_00 <- filter(df, !is.na(Y3))
  m00 <- mean(df_00$Y3)

  df_10 <- filter(df, !is.na(Y3), !is.na(Y1))
  mod10 <- lm(Y3 ~ Y1, data = df_10)
  m10 <- predict(mod10, data = filter(df, is.na(Y3), !is.na(Y1)))

  df_01 <- filter(df, !is.na(Y3), !is.na(Y2))
  mod01 <- lm(Y3 ~ Y2, data = df_01)
  m01 <- predict(mod01, data = filter(df, is.na(Y3), !is.na(Y2)))

  df_11 <- filter(df, !is.na(Y3), !is.na(Y1), !is.na(Y2))
  mod01 <- lm(Y3 ~ Y1 + Y2, data = df_11)
  m11 <- predict(mod11, data = filter(df, is.na(Y3), !is.na(Y1), !is.na(Y2)))

  # 2. Combine
  obs_y3 <- filter(df, !is.na(Y3)) |> pull(Y3)

  return(sum(obs_y3 + m00 + m10 + m01 + m11) / n_tot)
}

```

```{r}
#| label: MCMC
#| echo: false

clust <- parallel::makeCluster(min(parallelly::availableCores() - 2, 100))
registerDoParallel(clust)

mc_theta <-
  foreach(iter = 1:B,
          .options.RNG = 1,
          .packages = c("dplyr")) %dorng% {

    # Generate Data
    df <- gen_data(n_obs)
    ipw <- ipw_est(df, n_obs)
    reg <- reg_est(df, n_obs)

    cc <- filter(df, !is.na(Y3)) |> pull(Y3) |> mean()

    return(tibble(IPW = ipw,
                  REG = reg,
                  CC = cc))

  } |>
  bind_rows()

stopCluster(clust)

# Analyze Results
true_mu <- 89 / 96
mc_theta |>
  summarize(
    across(everything(),
    list(Bias = ~mean(.) - true_mu,
         SD = ~sd(.),
         Tstat = ~(mean(.) - true_mu) / sqrt(var(.) / B)),
    .names = "{.fn}_{.col}")) |> 
  tidyr::pivot_longer(cols = everything(),
                      names_to = c(".value", "Algorithm"),
                      names_pattern = "(.*)_(.*)") |>
  mutate(Pval = pt(-abs(Tstat), df = B)) |>
  knitr::kable(digits = 3)

```
